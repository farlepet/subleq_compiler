C-like language

Variables
================================

Only one type (int) which corresponds to an integer of a size dependant on the target word length

int t = 0, f, jl = -512;
int t_ptr;
t_ptr = &t;

An integer can also act as a pointer when prepended with `*`:
int ptr = 0x100;
*ptr = 32;

# not yet implemented:
int t[4];


Values
=================================

Integer values may be represented in different bases by adding a prefix:
    * Octal: 0737
    * Decimal: 1234
    * Hexadecimal: 0xDEAD1234


Functions
==================================

Functions are defined as follows:
func [return type] [function name]([arg 1 type] [arg 1 name], [arg 2 type] [arg 2 name]...) { }

Example:
func int add(int a, int b) {
    a += b;
    return a;
}

All functions must include a return statement, but the return statement doesn't neccessarially have to include any value.

# not yet implemented:
Function Calls
===================================

Functions are called in the following manner:
func(arg1, arg2, ...);

Variables can be set to the functions return value like so:
var = func(arg1, arg2, ...);
You can only set a variable to the output of the function, you cannot do any arithemtic on the same line.


Integer Operations
===================================

Available operators: =, ++, --, +=, -=, *=, /=

Only one operation can be performed per line. (e.g.: `a = b + 1` is invalid)

Example: (a = (2b^2 + 6b - 3) / 2)
```
int a, tmp;
a = b;
a *= b;
a *= 2;
tmp = b;
tmp *= 6;
a += tmp;
a -= 3;
a /= 2;
```


Pointers
==================================

There are no specific pointer types, any integer can be accessed as a pointer by prepending a `*`
Modifying specific parts of memory can be done like this: `*0x100 = value; *0x320 = -3;`
